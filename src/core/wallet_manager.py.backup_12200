"""
Wallet management for the Solana pump.fun sniping bot.
Fixed to ensure proper initialization and instance creation.
"""

import asyncio
from typing import Optional, List
from solders.keypair import Keypair
from solders.pubkey import Pubkey as PublicKey
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solana.rpc.types import TxOpts
from solders.transaction import Transaction
from solders.signature import Signature
import time

from src.utils.config import config_manager, WalletConfig
from src.utils.logger import get_logger

logger = get_logger("wallet")


class WalletManager:
    """Manages wallet operations including balance, transactions, and keypair handling."""
    
    def __init__(self):
        self.keypair: Optional[Keypair] = None
        self.public_key: Optional[PublicKey] = None
        self.client: Optional[AsyncClient] = None
        self._balance_cache: Optional[float] = None
        self._last_balance_check: float = 0
        self.balance_cache_duration = 5.0  # Cache balance for 5 seconds
        self._initialized = False
        
    async def initialize(self) -> None:
        """Initialize wallet manager with RPC client and load keypair."""
        if self._initialized:
            logger.info("Wallet manager already initialized")
            return
            
        # Import connection_manager here to avoid circular imports
        from src.core.connection_manager import connection_manager
        
        logger.info("Initializing wallet manager...")
        
        # Get RPC client from connection manager
        self.client = await connection_manager.get_rpc_client()
        if not self.client:
            raise RuntimeError("No RPC client available from connection manager")
            
        # Load keypair
        await self.load_keypair()
        
        # Validate wallet
        await self.validate_wallet()
        
        self._initialized = True
        logger.info(f"Wallet manager initialized successfully | public_key={str(self.public_key)}")
    
    async def load_keypair(self) -> None:
        """Load keypair from configuration."""
        try:
            wallet_config = config_manager.get_wallet()
            
            # Convert list of integers to bytes
            keypair_bytes = bytes(wallet_config.keypair)
            self.keypair = Keypair.from_bytes(keypair_bytes)
            self.public_key = self.keypair.pubkey()
            
            # Verify the public key matches configuration
            if str(self.public_key) != wallet_config.public_key:
                logger.warning(
                    f"Public key mismatch | config_key={wallet_config.public_key} | derived_key={str(self.public_key)}"
                )
            
            logger.info(f"Keypair loaded successfully | public_key={str(self.public_key)}")
            
        except Exception as e:
            logger.error(f"Failed to load keypair: {e}")
            raise
    
    async def get_balance(self, force_refresh: bool = False) -> float:
        """
        Get SOL balance for the wallet.
        
        Args:
            force_refresh: Force refresh balance from chain
            
        Returns:
            SOL balance as float
        """
        try:
            # Check cache
            current_time = time.time()
            if not force_refresh and self._balance_cache is not None:
                if current_time - self._last_balance_check < self.balance_cache_duration:
                    return self._balance_cache
            
            if not self.client or not self.public_key:
                raise ValueError("Wallet not initialized")
            
            # Get balance from chain
            response = await self.client.get_balance(self.public_key)
            balance_lamports = response.value
            balance_sol = balance_lamports / 1e9  # Convert lamports to SOL
            
            # Update cache
            self._balance_cache = balance_sol
            self._last_balance_check = current_time
            
            logger.debug(f"Balance refreshed: {balance_sol:.6f} SOL")
            return balance_sol
            
        except Exception as e:
            logger.error(f"Failed to get balance: {e}")
            # Return cached balance if available
            if self._balance_cache is not None:
                return self._balance_cache
            raise
    
    async def sign_transaction(self, transaction: Transaction) -> Transaction:
        """
        Sign a transaction with the wallet keypair.
        
        Args:
            transaction: Transaction to sign
            
        Returns:
            Signed transaction
        """
        try:
            if not self.keypair:
                raise ValueError("Keypair not loaded")
            
            # Get recent blockhash if not set
            if not transaction.recent_blockhash:
                if not self.client:
                    raise ValueError("Client not initialized")
                response = await self.client.get_latest_blockhash()
                transaction.recent_blockhash = response.value.blockhash
            
            # Sign the transaction
            transaction.sign(self.keypair)
            
            logger.debug("Transaction signed successfully")
            return transaction
            
        except Exception as e:
            logger.error(f"Failed to sign transaction: {e}")
            raise
    
    async def send_transaction(
        self,
        transaction: Transaction,
        opts: Optional[TxOpts] = None
    ) -> str:
        """
        Send a signed transaction.
        
        Args:
            transaction: Signed transaction to send
            opts: Transaction options
            
        Returns:
            Transaction signature
        """
        try:
            if not self.client:
                raise ValueError("Client not initialized")
            
            if opts is None:
                opts = TxOpts(skip_preflight=False, preflight_commitment=Commitment("confirmed"))
            
            # Send transaction
            response = await self.client.send_raw_transaction(transaction.serialize(), opts)
            signature = str(response.value)
            
            logger.info(f"Transaction sent | signature={signature}")
            return signature
            
        except Exception as e:
            logger.error(f"Failed to send transaction: {e}")
            raise
    
    async def confirm_transaction(
        self,
        signature: str,
        commitment: Commitment = Commitment("confirmed"),
        timeout: float = 30.0
    ) -> bool:
        """
        Wait for transaction confirmation.
        
        Args:
            signature: Transaction signature
            commitment: Confirmation commitment level
            timeout: Timeout in seconds
            
        Returns:
            True if confirmed, False if timeout
        """
        try:
            if not self.client:
                raise ValueError("Client not initialized")
            
            sig = Signature.from_string(signature)
            
            # Wait for confirmation with timeout
            start_time = asyncio.get_event_loop().time()
            while True:
                response = await self.client.get_signature_statuses([sig])
                
                if response.value and response.value[0]:
                    status = response.value[0]
                    if status.confirmation_status and status.confirmation_status.value >= commitment.value:
                        logger.info(f"Transaction confirmed | signature={signature}")
                        return True
                    
                    if status.err:
                        logger.error(f"Transaction failed | signature={signature} | error={status.err}")
                        return False
                
                # Check timeout
                if asyncio.get_event_loop().time() - start_time > timeout:
                    logger.warning(f"Transaction confirmation timeout | signature={signature}")
                    return False
                
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"Failed to confirm transaction {signature}: {e}")
            return False
    
    async def validate_wallet(self) -> bool:
        """
        Validate wallet configuration and connectivity.
        
        Returns:
            True if wallet is valid and accessible
        """
        try:
            if not self.keypair or not self.public_key or not self.client:
                logger.error("Wallet not properly initialized")
                return False
            
            # Try to get balance to test connectivity
            balance = await self.get_balance(force_refresh=True)
            
            if balance < 0.001:  # Minimum SOL for transactions
                logger.warning(f"Low SOL balance: {balance:.6f} SOL")
                return False
            
            logger.info(f"Wallet validation passed | balance={balance:.6f} SOL")
            return True
            
        except Exception as e:
            logger.error(f"Wallet validation failed: {e}")
            return False
    
    def get_public_key(self) -> Optional[PublicKey]:
        """Get wallet public key."""
        return self.public_key
    
    def get_keypair(self) -> Optional[Keypair]:
        """Get wallet keypair (use with caution)."""
        return self.keypair


# Create a function to get the wallet manager instance
_wallet_manager_instance = None

def get_wallet_manager() -> WalletManager:
    """Get or create the global wallet manager instance."""
    global _wallet_manager_instance
    if _wallet_manager_instance is None:
        _wallet_manager_instance = WalletManager()
    return _wallet_manager_instance


# For backward compatibility
wallet_manager = get_wallet_manager()
